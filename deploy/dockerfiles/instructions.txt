# WHAT IS THIS?

These are instructions to get a single-node setup of Graphistry up and running, on an Ubuntu box that you have provisioned. You should have received this inside a package of:

  * instructions.txt (these instructions)
  * certs.txt (how to generate certs)
  * containers.lxc.gz (the Docker containers with the relevant code)
  * load.sh (loads containers for use)
  * launch.sh (run the server)

# WHAT WILL WE BE DOING?

First, we will be preparing a machine to run Docker containers that can take advantage of the machine's GPU. This is a one-time task.
Second, we will be loading a few containers onto that machine that, in the ensemble, run Graphistry.

# HOW LONG SHOULD THIS TAKE?

Preparing a machine to run Docker containers should take around an hour (provisioning, finding a new version of Ubuntu, running the scripts).
Loading new versions of the containers onto the machine should take a minute or two, and the launch script should take ten seconds or so.

# WHAT DO I NEED?

You will need a box running the Docker engine, with the nvidia-docker standalone installation, with a GPU that can run Cuda 7.5, connected to the Internet and connected to a box running an Ansible playbook, also connected to the Internet.

Currently, the only supported and tested configuration is
  * Ubuntu 14.04 Trusty LTS
  * NVIDIA Grid K2 (g2.2xlarge on AWS EC2) or NVIDIA Tesla K40/K80.

# PREPARE THE MACHINE.

## SET UP NVIDIA-DOCKER.

### SET UP NVIDIA-DOCKER WITH OUR PROCESS.

1. Checkout the infrastructure repository at https://github.com/graphistry/infrastructure/ .
2. Run through the setup at https://github.com/graphistry/infrastructure/tree/master/nvidia-docker-host . If the script runs through, your machine will have passed a test of using Docker to run GPU computation (matrix multiplication in this case).

### OR SET UP NVIDIA-DOCKER WITH YOUR PROCESS.

1. (Use your process to set up nvidia-docker.)
2. Verify that your process succeeds by pulling down the nvidia/cuda:7.5-devel image and running
    `nvidia-docker run --rm nvidia/cuda:7.5-devel nvidia-smi`
3. Run `nvidia-docker run --rm graphistry/cljs:1.1 npm test` to verify that the cljs tests pass.

## SET UP GRAPHISTRY.

1. Unpack the package of files into a directory, and run `load.sh` . This should load the airgapped Graphistry deploy into your local Docker engine. 
2. Graphistry can terminate SSL, but by default will not. Follow the instructions in certs.txt for making certs, and for subsequent runtime parameters during launch, if you intend for Graphistry itself to terminate SSL.

# RUN THE APP.

`./launch.sh` .

# STOP OR RESTART THE APP. (RARE.)

Run `docker stop graphistry_httpd` or `docker restart graphistry_httpd`.

# VIEW THE LOGS.

Logs are mounted in the working directory of where you run launch.sh.

There are client logs, in clients/, server logs, in graphistry-json/, other assorted logs in central-app/ and worker/. Logs are in JSON. We recommend using [Bunyan](https://github.com/trentm/node-bunyan) to print logs in a more readable format. For instance, you can use `bunyan -o short < logfile`

If you want debug logs, launch with the `GRAPHISTRY_APP_CONFIG` environment variable having a key in its JSON hash of `LOG_LEVEL` set to DEBUG; i.e. `GRAPHISTRY_APP_CONFIG='{"LOG_LEVEL":"DEBUG"}' ./launch.sh` .

# VERIFY THAT THE APP IS RUNNING.

When you have launched the app, you should be able to point your browser to that machine via HTTP and receive a page with four links on it, each of which take you to a visualization of a different data set.

# USE A JUPYTER NOTEBOOK WITH PYGRAPHISTRY INSTALLED.

These are public images, available on DockerHub, built on the Jupyter notebooks with pygraphistry installed, with several demo notebooks.

Run `docker run -p 8888:8888  --restart=unless-stopped --name graphistry_notebook -d graphistry/jupyter-notebook:1.2`.

# KEEP MY WORKBOOKS AROUND FROM DEPLOY TO DEPLOY.

By default, the launch script will make a directory in its directory, `workbook_cache`, for all loaded workbooks.

If you make a new directory for each release that you deploy, and you are running an airgapped Graphistry, you may want to keep around the workbooks that you have previously made.

Please use the `GRAPHISTRY_WORKBOOK_CACHE` environment variable to set this to a directory of your choosing, i.e. `GRAPHISTRY_WORKBOOK_CACHE=/var/graphistry/workbooks GRAPHISTRY_APP_CONFIG='{"LOG_LEVEL":"INFO"}' ./launch.sh`.

# KEEP MY DATASETS AROUND FROM DEPLOY TO DEPLOY.

By default, the launch script will make a directory in its directory, `data_cache`, for all loaded datasets.

If you make a new directory for each release that you deploy, and you are running an airgapped Graphistry, you may want to keep around the datasets that you have previously loaded.

Please use the `GRAPHISTRY_DATA_CACHE` environment variable to set this to a directory of your choosing, i.e. `GRAPHISTRY_DATA_CACHE=/tmp/graphistry-data-cache ./launch.sh`

## KEEP MY DATASETS IN MEMORY ONLY. (READ-PROCESS-DISCARD.)

Your datasets live in two places: in the Node process memory and in the `data_cache` directory. They are not written anywhere else.

If you would like to launch Graphistry so as to never write a dataset or workbook to disk, please first ensure that your machine has virtual memory turned off, to avoid swapping memory out to disk. (This is often a common requirement at an installation, and we defer to best practices therein.)

Please set the `GRAPHISTRY_DATA_CACHE` environment variable to some subdirectory of `/run/shm` (on Ubuntu 14.04 LTS) or `/dev/shm` (on RHEL 7.2).

This will ensure that Graphistry will never write your datasets to disk.

For the discard part of read/process/discard: by keeping datasets in memory it is possible to cause a box to discard datasets on restart.

# CLEAN UP SPACE ON A GRAPHISTRY-ONLY BOX.

Feel free to use something like https://github.com/spotify/docker-gc .

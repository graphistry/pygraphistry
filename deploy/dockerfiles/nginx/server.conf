sendfile                        on;
tcp_nopush                      on;
tcp_nodelay                     on;

types_hash_max_size             2048;
server_tokens                   off;

keepalive_timeout               120;
ssl_session_cache               shared:SSL:50m;

client_max_body_size            128M;
gzip                            on;


# Support WebSocket proxying by intelligently setting the `Connection` header passed to tbe upstream
map $http_upgrade $connection_upgrade {
    default                     upgrade;
    ''                          '';
}


include                     /etc/nginx/graphistry/upstreams-central.conf;
include                     /etc/nginx/graphistry/upstreams-workers.conf;


server {
    listen                      80 default_server;
    server_name                 _;

    include                     /etc/nginx/graphistry/ssl.conf;

    proxy_http_version          1.1;

    proxy_set_header            Host              $http_host;
    proxy_set_header            X-Real-IP         $remote_addr;
    proxy_set_header            X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header            X-Forwarded-Proto $scheme;

    # Support proxying WebSocket connections
    proxy_set_header            Upgrade           $http_upgrade;
    proxy_set_header            Connection        $connection_upgrade;

    # TODO: figure out caching for upstreams (central, workers)
    proxy_cache                 off;
    proxy_buffering             on;

    # Allow upstreams to access the original request URI, before rewrites, etc.
    proxy_set_header            X-Original-Uri    $request_uri;
    proxy_set_header            X-Resolved-Uri    $uri$is_args$args;


    include                     /etc/nginx/graphistry/routes-workers.conf;

    # Redirect '/' (root index), and only that exact path, to /graphistry/
    location = / {
        return                  301 /graphistry/;
    }

    # Since the standard `location` block for central, `/`, strips out request body for more
    # efficient subrequests, we have a separate `location` block for the one path in central that
    # uses the request body, `/error`.
    location /error {
        proxy_pass              http://proxy-central;
    }

    location / {
        # Since central's main job is redirecting clients to workers, we strip out the request body
        # so that we save a bit of overhead in the subrequest, and central doesn't even look at it
        # anyway. Central's other jobs are serving static assets (which doesn't need the request
        # body) and the `/error` endpoint (which is covered in another `location` block, one that
        # does not strip the request body).
        proxy_method            GET;
        proxy_pass_request_body off;
        proxy_set_header        Content-Length    "";

        proxy_pass              http://proxy-central;
    }
}
